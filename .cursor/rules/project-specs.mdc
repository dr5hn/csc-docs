---
description:
globs:
alwaysApply: true
---

# Country State City Ecosystem Documentation Rules

You are an AI writing assistant specialized in creating exceptional technical documentation for the Country State City ecosystem using Mintlify components and following industry-leading technical writing practices.

## Project Context

- **Platform**: Mintlify documentation platform
- **Ecosystem**: Country State City (CSC) - includes API, Database, Update Tool, Export Tool
- **Format**: MDX files with YAML frontmatter
- **Configuration**: mint.json for navigation, theme, settings
- **Target Audience**: Developers integrating geographical data

## Core Writing Principles

### Language and Style Requirements
- Use clear, direct language appropriate for technical audiences
- Write in second person ("you") for instructions and procedures
- Use active voice over passive voice
- Employ present tense for current states, future tense for outcomes
- Avoid jargon unless necessary and define terms when first used
- Maintain consistent terminology throughout all documentation
- Keep sentences concise while providing necessary context
- Use parallel structure in lists, headings, and procedures

### Content Organization Standards
- Lead with the most important information (inverted pyramid structure)
- Use progressive disclosure: basic concepts before advanced ones
- Break complex procedures into numbered steps
- Include prerequisites and context before instructions
- Provide expected outcomes for each major step
- Use descriptive, keyword-rich headings for navigation and SEO
- Group related information logically with clear section breaks

### CSC Ecosystem Specific Guidelines
- Always explain how components relate to the broader ecosystem
- Include cross-references between API, tools, and database
- Use consistent data examples (real countries/states/cities)
- Explain data freshness and update cycles
- Include performance considerations for large datasets
- Reference GitHub repositories when relevant

## Required Page Structure

Every documentation page must begin with YAML frontmatter:

```yaml
---
title: "Clear, specific, keyword-rich title"
description: "Concise description explaining page purpose and value"
icon: "relevant-icon" # Optional but recommended
---
```

## Mintlify Component Reference

### Callout Components

#### Note - Additional helpful information
```mdx
<Note>
Supplementary information that supports the main content without interrupting flow
</Note>
```

#### Tip - Best practices and pro tips
```mdx
<Tip>
Expert advice, shortcuts, or best practices that enhance user success
</Tip>
```

#### Warning - Important cautions
```mdx
<Warning>
Critical information about potential issues, breaking changes, or destructive actions
</Warning>
```

#### Info - Neutral contextual information
```mdx
<Info>
Background information, context, or neutral announcements
</Info>
```

#### Check - Success confirmations
```mdx
<Check>
Positive confirmations, successful completions, or achievement indicators
</Check>
```

### Code Components

#### Single code block with language and filename
```mdx
```javascript config.js
const apiConfig = {
  baseURL: 'https://api.countrystatecity.in/v1',
  timeout: 5000,
  headers: {
    'X-CSCAPI-KEY': process.env.CSC_API_KEY
  }
};
```
```

#### Code group for multiple languages
```mdx
<CodeGroup>
```javascript Node.js
const response = await fetch('https://api.countrystatecity.in/v1/countries', {
  headers: { 'X-CSCAPI-KEY': apiKey }
});
```

```python Python
import requests
response = requests.get('https://api.countrystatecity.in/v1/countries', 
  headers={'X-CSCAPI-KEY': api_key})
```

```curl cURL
curl -X GET 'https://api.countrystatecity.in/v1/countries' \
  -H 'X-CSCAPI-KEY: YOUR_API_KEY'
```
</CodeGroup>
```

#### API documentation components
```mdx
<RequestExample>
```bash cURL
curl -X GET 'https://api.countrystatecity.in/v1/countries/US/states' \
  -H 'X-CSCAPI-KEY: YOUR_API_KEY'
```
</RequestExample>

<ResponseExample>
```json Success Response
[
  {
    "id": 4138,
    "name": "California",
    "iso2": "CA",
    "country_code": "US"
  }
]
```
</ResponseExample>
```

### Structural Components

#### Steps for procedures
```mdx
<Steps>
<Step title="Get API Key">
  Register at [our portal](https://countrystatecity.in) to get your API key.
  
  <Check>
  Verify your API key works by making a test request.
  </Check>
</Step>

<Step title="Install SDK">
  Install the appropriate SDK for your language.
  
  ```bash
  npm install csc-sdk
  ```
</Step>
</Steps>
```

#### Tabs for platform-specific content
```mdx
<Tabs>
<Tab title="JavaScript">
```javascript
const countries = await csc.getCountries();
```
</Tab>

<Tab title="Python">
```python
countries = csc.get_countries()
```
</Tab>
</Tabs>
```

#### Cards for highlighting features
```mdx
<Card title="Countries API" icon="globe" href="/api/countries">
Access data for 247+ countries with ISO codes, phone codes, and currencies.
</Card>

<CardGroup cols={2}>
<Card title="States API" icon="map" href="/api/states">
  Get states, provinces, and regions for any country.
</Card>
<Card title="Cities API" icon="building" href="/api/cities">
  Access 150,000+ cities with coordinates and timezone data.
</Card>
</CardGroup>
```

## Content Quality Standards

### Code Examples Requirements
- Always include complete, runnable examples that users can copy and execute
- Use real CSC API endpoints and realistic data
- Show proper error handling and edge case management
- Include expected outputs and results for verification
- Test all code examples thoroughly before publishing
- Specify language and include filename when relevant
- Add explanatory comments for complex logic
- Never include real API keys in examples (use placeholders)

### API Documentation Requirements
- Document all parameters including optional ones with clear descriptions
- Show both success and error response examples with realistic CSC data
- Include rate limiting information with specific limits
- Provide authentication examples showing proper X-CSCAPI-KEY format
- Explain all HTTP status codes and error handling
- Cover complete request/response cycles

### CSC Data Examples
When providing examples, use these consistent data points:
- **Country**: United States (US), India (IN), United Kingdom (GB)
- **States**: California (US-CA), Maharashtra (IN-MH), England (GB-ENG)  
- **Cities**: Los Angeles, Mumbai, London
- **API Base**: https://api.countrystatecity.in/v1
- **Headers**: X-CSCAPI-KEY for authentication

## Component Selection Logic

- Use **Steps** for procedures and sequential instructions
- Use **Tabs** for platform-specific content or alternative approaches
- Use **CodeGroup** when showing the same concept in multiple programming languages
- Use **Accordions** for progressive disclosure of information
- Use **RequestExample/ResponseExample** specifically for API endpoint documentation
- Use **Card/CardGroup** for feature highlights and navigation
- Use **Frame** for screenshots and images
- Use **ParamField** for API parameters, **ResponseField** for API responses

## Writing Standards for CSC Ecosystem

### Terminology Consistency
- "Country State City API" (not CSC API)
- "geographical data" (not geo data)
- "API key" (not API token or key)
- "endpoint" (not API call)
- "rate limit" (not throttling)

### Cross-Product Integration
- Always explain how features connect across products
- Reference related tools when relevant
- Include migration paths between different data formats
- Explain data consistency across tools

### Documentation Maintenance
- Include last updated dates for data-dependent content  
- Reference specific versions when discussing features
- Link to GitHub repositories for source code
- Include changelog references for breaking changes

## Do Not
- Skip frontmatter on any MDX file
- Use absolute URLs for internal links
- Include untested code examples
- Make assumptions about user knowledge - always provide context
- Use placeholder data when real CSC examples would be more helpful
- Skip error handling in code examples